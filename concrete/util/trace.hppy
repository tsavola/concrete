/*
 * Copyright (c) 2011, 2012  Timo Savola
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 */

#ifndef CONCRETE_UTIL_TRACE_HPP
#define CONCRETE_UTIL_TRACE_HPP

#ifdef CONCRETE_TRACE
# include <string>
# include <boost/format.hpp>
#endif

namespace concrete {

class Pointer;
class DataBase;

#ifdef CONCRETE_TRACE

std::string TracePrefix();
void TraceOutput(const std::string &line);

template <typename Format>
inline Format TraceFormat(Format format)
{
	return format;
}

template <typename Format, typename FirstArg, typename... OtherArgs>
inline Format TraceFormat(Format format, FirstArg first_arg, OtherArgs... other_args)
{
	return TraceFormat(format % first_arg, other_args...);
}

template <typename... Args>
void Trace(const char *format, Args... args) throw ()
{
	try {
		TraceOutput(TracePrefix() + boost::str(TraceFormat(boost::format(format), args...)));
	} catch (...) {}
}

void TraceData(const void *data, size_t size) throw ();
void TraceData(const Pointer &pointer, size_t size) throw ();

#else

template <typename... Args> inline void Trace(const char *, Args...) throw () {}
inline void TraceData(const void *data, size_t size) throw () {}
inline void TraceData(const Pointer &pointer, size_t size) throw () {}

#endif

template <typename T> inline void TraceData(const T &x) throw () { TraceData(x, sizeof (T)); }

} // namespace

#endif
