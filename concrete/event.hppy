/*
 * Copyright (c) 2011, 2012  Timo Savola
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 */

#ifndef CONCRETE_EVENT_HPP
#define CONCRETE_EVENT_HPP

#include <concrete/util/noncopyable.hpp>

namespace concrete {

class EventTrigger;

/**
 * I/O event callback interface.
 */
class EventCallback: Noncopyable {
public:
	virtual ~EventCallback() throw () {}

	/**
	 * Invoked when an I/O condition occurs or the EventLoop is terminated.
	 * This method is responsible for deleting the EventCallback instance.
	 */
	virtual void resume() throw () = 0;
};

/**
 * I/O event dispatch mechanism interface.
 */
class EventLoop: Noncopyable {
public:
	virtual ~EventLoop() throw () {}

	/**
	 * Subscribe to an I/O event.  (EventTrigger type declaration is
	 * incomplete as it's platform-specific.)
	 * @param trigger  defines the I/O condition
	 * @param callback will be invoked when the event occurs
	 */
	virtual void wait(const EventTrigger &trigger, EventCallback *callback) = 0;
};

} // namespace

#endif
