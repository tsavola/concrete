/*
 * Copyright (c) 2011  Timo Savola
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 */

#ifndef CONCRETE_EXECUTION_HPP
#define CONCRETE_EXECUTION_HPP

#include <cstddef>
#include <cstdint>

#include <concrete/pointer.hpp>
#include <concrete/continuation.hpp>
#include <concrete/list.hpp>
#include <concrete/objects/code.hpp>
#include <concrete/objects/dict.hpp>
#include <concrete/objects/object.hpp>
#include <concrete/objects/tuple.hpp>
#include <concrete/portable.hpp>
#include <concrete/util/noncopyable.hpp>
#include <concrete/util/packed.hpp>

namespace concrete {

class ExecutionFrame: public Pointer {
	{{{ DeclarePointer("ExecutionFrame") }}}

	friend class Execution;

	Object result();

protected:
	enum { MaxBlocks = 20 };

	struct Block {
		Portable<uint16_t> position;
		Portable<uint16_t> delta;
	} CONCRETE_PACKED;

	struct Data: Noncopyable {
		Data(const ExecutionFrame &parent,
		     const CodeObject &code,
		     const DictObject &dict) throw ();
		~Data() throw ();

		unsigned int stack_size() const throw ();

		const Portable<ExecutionFrame> parent;
		const Portable<CodeObject>     code;
		const Portable<DictObject>     dict;
		Portable<uint32_t>             bytecode_position;
		Portable<Object>               call_callable;
		Portable<Continuation>         call_continuation;
		Portable<bool>                 call_not_filter;
		Portable<uint32_t>             block_pointer;
		Block                          blocks[MaxBlocks];
		Portable<uint32_t>             stack_pointer;
		Portable<Object>               stack_objects[0]; // must be last
	} CONCRETE_PACKED;

	static ExecutionFrame New(const ExecutionFrame &parent,
	                          const CodeObject &code,
	                          const DictObject &dict);

	template <typename T> T load_bytecode();

	void jump_absolute(unsigned int target);
	void jump_forward(unsigned int delta);

	void push(const Object &object);
	Object peek() const;
	Object pop();

	void push_block(unsigned int delta);
	const Block &peek_block() const;
	void pop_block();
};

class Execution: public ListNode<Execution> {
	{{{ DeclarePointer("Execution", "ListNode<Execution>") }}}

	static Execution New(const CodeObject &code);

	bool execute();
	ExecutionFrame new_frame(const CodeObject &code, const DictObject &dict);

protected:
	struct Data: ListNode<Execution>::Data {
		Data(const ExecutionFrame &frame) throw ();
		~Data() throw ();

		Portable<ExecutionFrame> initial;
		Portable<ExecutionFrame> current;
	} CONCRETE_PACKED;

	ExecutionFrame frame() const;
	CodeObject code() const;
	DictObject dict() const;

	void initiate_call(const Object &callable, bool not_filter = false);
	void initiate_call(const Object &callable, const TupleObject &args, bool not_filter = false);
	void initiate_call(const Object &callable,
	                   const TupleObject &args,
	                   const DictObject &kwargs,
	                   bool not_filter = false);
	bool resume_call();

	void push(const Object &object);
	Object peek() const;
	Object pop();

	void execute_op();

	void op_pop_top();
	void op_rot_two();
	void op_rot_three();
	void op_rot_four();
	void op_dup_top();
	void op_binary_add();
	void op_pop_block();
	void op_return_value();
	void op_store_name(unsigned int namei);
	void op_load_const(unsigned int consti);
	void op_load_name(unsigned int namei);
	void op_load_attr(unsigned int namei);
	void op_compare_op(unsigned int opname);
	void op_import_name(unsigned int namei);
	void op_import_from(unsigned int namei);
	void op_jump_forward(unsigned int delta);
	void op_jump_if_false_or_pop(unsigned int target);
	void op_jump_if_true_or_pop(unsigned int target);
	void op_jump_absolute(unsigned int target);
	void op_pop_jump_if_false(unsigned int target);
	void op_pop_jump_if_true(unsigned int target);
	void op_setup_loop(unsigned int delta);
	void op_load_fast(unsigned int var_num);
	void op_store_fast(unsigned int var_num);
	void op_call_function(uint16_t argc);
	void op_make_function(uint16_t argc);

	bool nonzero(Object object);
};

} // namespace

#endif
