/*
 * Copyright (c) 2011, 2012  Timo Savola
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 */

#include "builtins.hpp"
#include "builtins/print.hpp"

#include <concrete/nested-data.hpp>
#include <concrete/objects/bool.hpp>
#include <concrete/objects/dict.hpp>
#include <concrete/objects/internal.hpp>
#include <concrete/objects/int.hpp>
#include <concrete/objects/module.hpp>
#include <concrete/objects/string.hpp>

namespace concrete {

DictObject BuiltinsModuleInit(const DictObject &modules)
{
	auto dict = DictObject::New();

	dict.set_item(StringObject::New("None"),  Object());
	dict.set_item(StringObject::New("True"),  BoolObject::True());
	dict.set_item(StringObject::New("False"), BoolObject::False());

	{{{ SetModuleInternals("BuiltinsModule") }}}

	modules.set_item(StringObject::New("builtins"), ModuleObject::New(dict));

	return dict;
}

{{{ ImplementInternalFunction("BuiltinsModule_Id") }}}
{
	return IntObject::New(args.get_item(0).address());
}

{{{ ImplementInternalContinuation("BuiltinsModule_Print") }}}

{{{ ImplementInternalFunction("BuiltinsModule_Repr") }}}
{
	return args.get_item(0).repr();
}

{{{ ImplementInternalNestedCall("BuiltinsModule_Str") }}}
{
	return NestedCall(args.get_item(0).protocol()->str, args, kwargs);
}

{{{ ImplementInternalNestedCall("BuiltinsModule_Len") }}}
{
	return NestedCall(args.get_item(0).protocol()->len, args, kwargs);
}

} // namespace
