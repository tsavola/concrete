/*
 * Copyright (c) 2011  Timo Savola
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 */

#include "concrete/modules/builtins.hpp"
#include "concrete/modules/builtins/print.hpp"

#include <concrete/nested-data.hpp>
#include <concrete/objects/bool.hpp>
#include <concrete/objects/dict.hpp>
#include <concrete/objects/internal.hpp>
#include <concrete/objects/long.hpp>
#include <concrete/objects/module.hpp>
#include <concrete/objects/string.hpp>

namespace concrete {

DictObject BuiltinsModuleInit(const DictObject &modules)
{
	auto dict = DictObject::New();

	dict.set_item(StringObject::New("None"),  Object());
	dict.set_item(StringObject::New("True"),  BoolObject::True());
	dict.set_item(StringObject::New("False"), BoolObject::False());

	dict.set_item(StringObject::New("id"),    InternalObject::New(internal::BuiltinsModule_Id));
	dict.set_item(StringObject::New("print"), InternalObject::New(internal::BuiltinsModule_Print));
	dict.set_item(StringObject::New("repr"),  InternalObject::New(internal::BuiltinsModule_Repr));
	dict.set_item(StringObject::New("str"),   InternalObject::New(internal::BuiltinsModule_Str));
	dict.set_item(StringObject::New("len"),   InternalObject::New(internal::BuiltinsModule_Len));

	modules.set_item(StringObject::New("builtins"), ModuleObject::New(dict));

	return dict;
}

static Object Id(const TupleObject &args, const DictObject &kwargs)
{
	return LongObject::New(args.get_item(0).address());
}

{{{ ImplementPointer("Print") }}}

static Object Repr(const TupleObject &args, const DictObject &kwargs)
{
	return args.get_item(0).repr();
}

static NestedCall Str(const TupleObject &args, const DictObject &kwargs)
{
	return NestedCall(args.get_item(0).protocol()->repr, args, kwargs);
}

static NestedCall Len(const TupleObject &args, const DictObject &kwargs)
{
	return NestedCall(args.get_item(0).protocol()->len, args, kwargs);
}

} // namespace

CONCRETE_INTERNAL_FUNCTION    (BuiltinsModule_Id,    Id)
CONCRETE_INTERNAL_CONTINUATION(BuiltinsModule_Print, Print)
CONCRETE_INTERNAL_FUNCTION    (BuiltinsModule_Repr,  Repr)
CONCRETE_INTERNAL_NESTED_CALL (BuiltinsModule_Str,   Str)
CONCRETE_INTERNAL_NESTED_CALL (BuiltinsModule_Len,   Len)
