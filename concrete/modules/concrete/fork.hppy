/*
 * Copyright (c) 2011  Timo Savola
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 */

#ifndef CONCRETE_MODULES_CONCRETE_FORK_HPP
#define CONCRETE_MODULES_CONCRETE_FORK_HPP

#include <concrete/io/buffer.hpp>
#include <concrete/io/url.hpp>
#include <concrete/objects/bool.hpp>
#include <concrete/portable.hpp>
#include <concrete/resource.hpp>
#include <concrete/util/trace.hpp>

#include "urlopen.hpp"

namespace concrete {

class ConcreteModule_Fork: public AbstractURLOpen {
	{{{ DeclarePointer("ConcreteModule_Fork", "AbstractURLOpen", has_construct=False, has_destroy=False) }}}

protected:
	struct Data: AbstractURLOpen::Data {
		~Data() throw ()
		{
			request.destroy();
		}

		void reset() throw ()
		{
			request.destroy();
			AbstractURLOpen::Data::reset();
		}

		bool is_lost() const throw ()
		{
			return request.is_lost() || AbstractURLOpen::Data::is_lost();
		}

		PortableResource<Buffer> request;
		Portable<bool>           forked;
	} CONCRETE_PACKED;

public:
	bool resume(Object &result) const
	{
		if (data()->forked) {
			result = BoolObject::False();
			return true;
		}

		return AbstractURLOpen::resume(result);
	}

protected:
	virtual State open(Object &result) const
	{
		Trace("fork open");

		auto url = data()->url->require<StringObject>();

		// create buffer resource before snapshotting because it affects arena
		auto request = PortableResource<Buffer>::New();
		data()->request = request;

		auto snapshot = Arena::Active().snapshot();

		request->reset(snapshot.size);

		auto data_ptr = data();
		// critical section
		data_ptr->forked = true;
		request->produce(snapshot.base, snapshot.size);
		data_ptr->forked = false;

		auto response = PortableResource<Buffer>::New(size_t(ResponseBufferSize));
		data()->response = response;

		auto opener = PortableResource<URLOpener>::New(url, *response, *request);
		data()->opener = opener;

		return opening(result);
	}

	virtual State done(Object &result) const
	{
		Trace("fork done");

		if (data()->opener->response_status() != 200)
			throw RuntimeError("HTTP response error");

		result = BoolObject::True();

		return Done;
	}
};

} // namespace

#endif
