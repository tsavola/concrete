/*
 * Copyright (c) 2011, 2012  Timo Savola
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 */

#ifndef CONCRETE_MODULES_BUILTINS_PRINT_HPP
#define CONCRETE_MODULES_BUILTINS_PRINT_HPP

#include "concrete/modules/builtins.hpp"

#include <iostream>

#include <concrete/nested-data.hpp>
#include <concrete/objects/dict.hpp>
#include <concrete/objects/string.hpp>

namespace concrete {

class BuiltinsModule_Print: public NestedContinuation {
	{{{ DeclarePointer("BuiltinsModule_Print", "NestedContinuation", has_construct=False, has_destroy=False) }}}

protected:
	struct Data: NestedContinuation::Data {
		Portable<uint32_t> index;
		Portable<Object>   args;
		Portable<Object>   deferred_value;
	} CONCRETE_PACKED;

public:
	bool initiate(Object &result, const TupleObject &args, const DictObject &kwargs) const
	{
		if (args.size() == 0)
			return finish();

		data()->index = 0;
		data()->args = args;

		return evaluate();
	}

	bool resume(Object &result) const
	{
		Object value;

		if (in_nested_call()) {
			if (!resume_nested(value))
				return false;
		} else {
			value = data()->deferred_value;
		}

		BuiltinsPrintOutput(value.require<StringObject>().string());

		unsigned int index = data()->index;
		unsigned int size = data()->args->cast<TupleObject>().size();

		if (index == size - 1)
			return finish();

		BuiltinsPrintOutput(" ");

		data()->index = ++index;

		return evaluate();
	}

private:
	bool evaluate() const
	{
		unsigned int index = data()->index;
		auto self = data()->args->cast<TupleObject>().get_item(index);
		auto callable = self.protocol()->str->require<CallableObject>();

		Object value;
		auto tuple = TupleObject::New(self);
		auto dict = DictObject::NewEmpty();

		if (call_nested(callable, value, tuple, dict))
			data()->deferred_value = value;

		return false;
	}

	bool finish() const
	{
		BuiltinsPrintOutput("\n");
		BuiltinsPrintFlush();

		return true;
	}
};

} // namespace

#endif
