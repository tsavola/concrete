/*
 * Copyright (c) 2011, 2012  Timo Savola
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 */

#ifndef CONCRETE_POINTER_HPP
#define CONCRETE_POINTER_HPP

#include <cstddef>
#include <cstdint>
#include <exception>

#include <concrete/arena.hpp>

namespace concrete {

class NoneObject;
class Object;
class TypeObject;

class Pointer {
	friend class NoneObject;
	friend class Object;
	friend class TypeObject;

public:
	struct RawAccess {
		typedef uint32_t RawType;

		static RawType InitRef() throw () { return 0; }
		static void Ref(RawType address) throw () {}
		static void Unref(RawType address) throw () {}
		static RawType Extract(const Pointer &pointer) throw () { return pointer.m_address; }
		static RawType ExtractRef(const Pointer &pointer) throw () { return pointer.m_address; }

		template <typename PointerType>
		static PointerType Materialize(RawType address) throw ();

		template <typename PointerType>
		static PointerType Materialize(RawType address, PointerType *) throw ();
	};

	Pointer() throw (): m_address(0) {}
	Pointer(const Pointer &other) throw (): m_address(other.m_address) {}

	void operator=(const Pointer &other) throw () { m_address = other.m_address; }

	bool operator==(const Pointer &other) const throw () { return m_address == other.m_address; }
	bool operator!=(const Pointer &other) const throw () { return m_address != other.m_address; }

	operator bool() const throw () { return m_address != 0; }
	bool operator!() const throw () { return m_address == 0; }

	template <typename PointerType> PointerType cast() const throw ();

	unsigned int address() const throw () { return m_address; }

protected:
	template <typename PointerType, typename... Args> static PointerType NewPointer(Args... args);
	template <typename PointerType, typename... Args> static PointerType NewCustomSizePointer(size_t size, Args... args);

	template <typename PointerType> static void DestroyPointer(PointerType &pointer) throw ();
	template <typename DataType> static void DestroyData(unsigned int address, DataType *data) throw ();

	template <typename PointerType> static void DestroyExtendedPointer(PointerType &pointer, typename PointerType::Data *data, size_t extension_size) throw ();
	template <typename DataType> static void DestroyExtendedData(unsigned int address, DataType *data, size_t extension_size) throw ();

	template <typename DataType> static DataType *DataCast(unsigned int address);
	template <typename DataType> static DataType *NonthrowingDataCast(unsigned int address) throw ();

	template <typename DataType> static void ExtendDataAccess(unsigned int address, size_t extension_size);
	template <typename DataType> static bool NonthrowingExtendDataAccess(unsigned int address, size_t extension_size) throw ();

	explicit Pointer(unsigned int address) throw (): m_address(address) {}

	void reset_address(unsigned int address) throw () { m_address = address; }

	template <typename DataType> DataType *data_cast() const;
	template <typename DataType> DataType *nonthrowing_data_cast() const throw ();

	template <typename DataType> void extend_data_access(size_t extension_size) const;
	template <typename DataType> bool nonthrowing_extend_data_access(size_t extension_size) const throw ();

private:
	template <typename DataType> static void DestroyData(unsigned int address, DataType *data, size_t size) throw ();

	unsigned int m_address;
};

} // namespace

#include "pointer-inline.hpp"

#endif
