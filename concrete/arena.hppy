/*
 * Copyright (c) 2011, 2012  Timo Savola
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 */

#ifndef CONCRETE_ARENA_HPP
#define CONCRETE_ARENA_HPP

#include <cstddef>
#include <cstdint>
#include <exception>

#include <concrete/allocation.hpp>
#include <concrete/portable.hpp>
#include <concrete/util/noncopyable.hpp>
#include <concrete/util/packed.hpp>

namespace concrete {

class Arena: Noncopyable {
public:
	enum { SizeLimit = 64 * 1024 * 1024 };

	struct Snapshot {
		Snapshot(const void *base, size_t size): base(base), size(size) {}

		const void *base;
		size_t      size;
	};

	typedef Allocator::Allocation Allocation;

	static Arena &Active() throw ();

	Arena() throw ();
	Arena(void *base, size_t size);

	Snapshot snapshot() const throw ();

	Allocation allocate(size_t size);
	void free(unsigned int address, void *data, size_t size) throw ();

	void *access(unsigned int address, size_t size);
	void *nonthrowing_access(unsigned int address, size_t size) throw ();

	void extend_access(unsigned int address, size_t size);
	bool nonthrowing_extend_access(unsigned int address, size_t size) throw ();

	void defer_access_error(unsigned int address) throw ();
	void check_access_error();

private:
	Allocator    m_allocator;
	unsigned int m_access_error_address;
};

class AllocationError: std::exception {
public:
	explicit AllocationError(size_t size) throw ();

	virtual const char *what() const throw ();
	size_t size() const throw () { return m_size; }

private:
	const size_t m_size;
};

class IntegrityError: public std::exception {
public:
	explicit IntegrityError(unsigned int address) throw ();

	virtual const char *what() const throw ();
	unsigned int address() const throw () { return m_address; }

private:
	const unsigned int m_address;
};

} // namespace

#endif
