/*
 * Copyright (c) 2012  Timo Savola
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 */

#ifndef CONCRETE_ALLOCATION_HPP
#define CONCRETE_ALLOCATION_HPP

#include <cstddef>
#include <cstdint>

#include <concrete/portable.hpp>
#include <concrete/util/noncopyable.hpp>
#include <concrete/util/packed.hpp>

namespace concrete {

class Allocator: Noncopyable {
	typedef Portable<uint32_t> FreeNodeLink;

	struct FreeNode {
		Portable<uint32_t> size;
		FreeNodeLink       next;
	} CONCRETE_PACKED;

public:
	enum { Alignment = 8 };
	enum { InitialAddress = (sizeof (FreeNodeLink) + Alignment - 1) & ~(Alignment - 1) };

	struct Allocation {
		Allocation() throw ():
			address(0), data(NULL) {}

		Allocation(unsigned int address, void *data) throw ():
			address(address), data(data) {}

		unsigned int  address;
		void         *data;
	};

	static uint32_t AlignedSize(size_t size) throw ()
	{
		return uint32_t(size + Alignment - 1) & ~uint32_t(Alignment - 1);
	}

	explicit Allocator(size_t size_limit) throw ():
		arena_base(NULL), arena_size(0), size_limit(size_limit) {}

	Allocator(void *base, size_t size, size_t size_limit) throw ():
		arena_base(reinterpret_cast<char *> (base)), arena_size(size), size_limit(size_limit) {}

	~Allocator() throw ();

	Allocation allocate(size_t size) throw ();
	bool free(unsigned int address, void *data, size_t size) throw ();

private:
	bool init() throw ();

	void insert_free_node(uint32_t address, uint32_t size);
	uint32_t find_free_node(uint32_t size);

	template <typename T> T &arena_ref(uint32_t address);

public:
	char           *arena_base;
	uint32_t        arena_size;
	const uint32_t  size_limit;
};

} // namespace

#endif
