/*
 * Copyright (c) 2011, 2012  Timo Savola
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 */

#include <concrete/arena.hpp>
#include <concrete/util/assert.hpp>

namespace concrete {

template <typename PointerType>
PointerType Pointer::RawAccess::Materialize(RawType address) throw ()
{
	return PointerType(address);
}

template <typename PointerType>
PointerType Pointer::RawAccess::Materialize(RawType address, PointerType *) throw ()
{
	return PointerType(address);
}

template <typename PointerType, typename... Args>
PointerType Pointer::NewPointer(Args... args)
{
	return NewCustomSizePointer<PointerType>(sizeof (typename PointerType::Data), args...);
}

template <typename PointerType, typename... Args>
PointerType Pointer::NewCustomSizePointer(size_t size, Args... args)
{
	assert(size >= sizeof (typename PointerType::Data));

	auto alloc = Arena::Active().allocate(size);
	new (alloc.data) typename PointerType::Data(args...);

	return PointerType(alloc.address);
}

template <typename PointerType>
void Pointer::DestroyPointer(PointerType &pointer) throw ()
{
	if (pointer.m_address) {
		auto data = NonthrowingDataCast<typename PointerType::Data>(pointer.m_address);
		if (data)
			DestroyData(pointer.m_address, data);

		pointer.reset_address(0);
	}
}

template <typename DataType>
void Pointer::DestroyData(unsigned int address, DataType *data) throw ()
{
	DestroyData(address, data, sizeof (DataType));
}

template <typename DataType>
void Pointer::DestroyData(unsigned int address, DataType *data, size_t size) throw ()
{
	data->~DataType();
	Arena::Active().free(address, data, size);
}

template <typename PointerType>
void Pointer::DestroyExtendedPointer(PointerType &pointer,
                                     typename PointerType::Data *data,
                                     size_t extension_size) throw ()
{
	DestroyExtendedData(pointer.m_address, data, extension_size);
	pointer.reset_address(0);
}

template <typename DataType>
void Pointer::DestroyExtendedData(unsigned int address,
                                  DataType *data,
                                  size_t extension_size) throw ()
{
	if (NonthrowingExtendDataAccess<DataType>(address, extension_size))
		DestroyData(address, data, sizeof (DataType) + extension_size);
}

template <typename DataType>
DataType *Pointer::DataCast(unsigned int address)
{
	return static_cast<DataType *> (Arena::Active().access(address, sizeof (DataType)));
}

template <typename DataType>
DataType *Pointer::NonthrowingDataCast(unsigned int address) throw ()
{
	return static_cast<DataType *> (Arena::Active().nonthrowing_access(address, sizeof (DataType)));
}

template <typename DataType>
void Pointer::ExtendDataAccess(unsigned int address, size_t extension_size)
{
	Arena::Active().extend_access(address, sizeof (DataType) + extension_size);
}

template <typename DataType>
bool Pointer::NonthrowingExtendDataAccess(unsigned int address, size_t extension_size) throw ()
{
	return Arena::Active().nonthrowing_extend_access(address, sizeof (DataType) + extension_size);
}

template <typename PointerType>
PointerType Pointer::cast() const throw ()
{
	return RawAccess::Materialize<PointerType>(m_address);
}

template <typename DataType>
DataType *Pointer::data_cast() const
{
	return DataCast<DataType>(m_address);
}

template <typename DataType>
DataType *Pointer::nonthrowing_data_cast() const throw ()
{
	return NonthrowingDataCast<DataType>(m_address);
}

template <typename DataType>
void Pointer::extend_data_access(size_t extension_size) const
{
	ExtendDataAccess<DataType>(m_address, extension_size);
}

template <typename DataType>
bool Pointer::nonthrowing_extend_data_access(size_t extension_size) const throw ()
{
	return NonthrowingExtendDataAccess<DataType>(m_address, extension_size);
}

} // namespace
