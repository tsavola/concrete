/*
 * Copyright (c) 2011, 2012  Timo Savola
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 */

#include "tuple-data.hpp"

#include <concrete/context-data.hpp>
#include <concrete/exception.hpp>
#include <concrete/objects/string.hpp>
#include <concrete/objects/type.hpp>
#include <concrete/util/assert.hpp>

namespace concrete {

{{{ ImplementObject("TupleObject", data_method=False, destroy_method=False) }}}

TupleObject::Data::Data(const TypeObject &type, uint32_t ext_size):
	ExtendedObject::Data(type, ext_size)
{
	for (unsigned int i = 0; i < size(); i++)
		new (&items()[i]) Portable<Object>();
}

TupleObject::Data::~Data() throw ()
{
	for (unsigned int i = size(); i-- > 0; )
		items()[i].~Portable<Object>();
}

TupleObject TupleObject::New()
{
	return Context::Active().data()->tuple_empty->cast<TupleObject>();
}

TupleObject TupleObject::NewWithSize(unsigned int size)
{
	size_t ext_size = sizeof (Portable<Object>) * size;
	return NewCustomSizeObject<TupleObject>(sizeof (Data) + ext_size, ext_size);
}

void TupleObject::Destroy(unsigned int address, Data *data) throw ()
{
	DestroyExtendedData(address, data);
}

void TupleObject::init_item(unsigned int index, const Object &item)
{
	assert(index < data()->size());
	data()->items()[index] = item;
}

unsigned int TupleObject::size() const
{
	return data()->size();
}

Object TupleObject::get_item(unsigned int index) const
{
	if (index >= data()->size())
		throw RuntimeError("tuple index out of bounds");

	return data()->items()[index];
}

TupleObject::Data *TupleObject::data() const
{
	return extended_data_cast<Data>();
}

void TupleObjectTypeInit(const TypeObject &type, const char *name)
{
	ExtendedObjectTypeInit(type, name);

	Context::Active().data()->tuple_empty = TupleObject::NewWithSize(0);
}

} // namespace
