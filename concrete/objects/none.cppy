/*
 * Copyright (c) 2011, 2012  Timo Savola
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 */

#include "none-data.hpp"

#include <concrete/arena.hpp>
#include <concrete/context-data.hpp>
#include <concrete/objects/internal.hpp>
#include <concrete/objects/string.hpp>
#include <concrete/objects/type.hpp>

namespace concrete {

{{{ ImplementObject("NoneObject", destroy_method=False) }}}

NoneObject::Data::Data(const Pointer &type_placeholder) throw ():
	Object::Data(type_placeholder)
{
}

NoneObject NoneObject::NewBuiltin()
{
	auto allocated = Arena::Active().allocate(sizeof (Data));
	new (allocated.data) Data(Pointer(allocated.address));
	return NoneObject(allocated.address);
}

void NoneObject::Destroy(unsigned int address, Data *data) throw ()
{
	assert(false);
}

void NoneObject::init_builtin(const Portable<TypeObject> &type)
{
	data()->init_none_type(type);
}

void NoneObjectTypeInit(const TypeObject &type, const char *name)
{
	ObjectTypeInit(type, name);
}

} // namespace
