/*
 * Copyright (c) 2011, 2012  Timo Savola
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 */

#ifndef CONCRETE_OBJECTS_TUPLE_DATA_HPP
#define CONCRETE_OBJECTS_TUPLE_DATA_HPP

#include "tuple.hpp"

#include <concrete/objects/extended-data.hpp>
#include <concrete/portable.hpp>

namespace concrete {

struct TupleObject::Data: ExtendedObject::Data {
	typedef Portable<Object> ItemType;

	Data(const TypeObject &type, uint32_t ext_size);
	~Data() throw ();

	unsigned int size() const throw () { return extension_size<ItemType>(); }

	ItemType *items() throw () { return extension_data<Data, ItemType>(); }
	const ItemType *items() const throw () { return extension_data<Data, ItemType>(); }

	template <typename Visitor> void visit(Visitor &v) const;
} CONCRETE_PACKED;

template <typename Visitor>
void TupleObject::Data::visit(Visitor &v) const
{
	Object::Data::visit(v);

	auto s = size();

	for (unsigned int i = 0; i < s; i++)
		v(items()[i]);
}

} // namespace

#endif
