/*
 * Copyright (c) 2011  Timo Savola
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 */

#include "internal-data.hpp"

#include <concrete/context-data.hpp>
#include <concrete/context.hpp>
#include <concrete/objects/string.hpp>
#include <concrete/objects/type.hpp>
#include <concrete/util/assert.hpp>

namespace concrete {

static InternalObject::Function *internal_functions[] = {
#	define CONCRETE_INTERNAL_SYMBOL(Symbol) internal_symbol::Symbol,
#	include <concrete/internals.hpp>
#	undef CONCRETE_INTERNAL_SYMBOL
};

{{{ ImplementObject("InternalObject") }}}

InternalObject::Data::Data(const TypeObject &type, internal::SymbolId symbol_id):
	CallableObject::Data(type),
	symbol_id(symbol_id)
{
}

Object InternalObject::continuable_call(Continuation &cont,
                                        Continuation::Stage stage,
                                        const TupleObject *args,
                                        const DictObject *kwargs) const
{
	unsigned int index = data()->symbol_id;

	if (index >= sizeof (internal_functions) / sizeof (internal_functions[0]))
		throw RuntimeError("internal call undefined");

	assert(internal_functions[index]);
	return internal_functions[index](cont, stage, args, kwargs);
}

InternalObject InternalObject::New(internal::SymbolId symbol_id)
{
	return NewObject<InternalObject>(symbol_id);
}

Object InternalObject::immediate_call_args(const TupleObject &args) const
{
	Continuation dummy;

	auto kwargs = DictObject::NewEmpty();
	auto result = continuable_call(dummy, Continuation::Initiate, &args, &kwargs);

	if (dummy) {
		continuable_call(dummy, Continuation::Release, NULL, NULL);
		throw RuntimeError("non-immediate internal function called from native context");
	}

	return result;
}

void InternalObjectTypeInit(const TypeObject &type, const char *name)
{
	CallableObjectTypeInit(type, name);
}

} // namespace
