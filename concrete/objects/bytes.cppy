/*
 * Copyright (c) 2011, 2012  Timo Savola
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 */

#include "bytes-data.hpp"

#include <cstring>

#include <concrete/arena.hpp>
#include <concrete/context-data.hpp>
#include <concrete/objects/string.hpp>
#include <concrete/objects/type.hpp>

namespace concrete {

{{{ ImplementObject("BytesObject", data_method=False, destroy_method=False) }}}

BytesObject::Data::Data(const TypeObject &type, uint32_t size, const uint8_t *data):
	ExtendedObject::Data(type, size)
{
	std::memcpy(extension_data<Data, uint8_t>(), data, size);
}

BytesObject BytesObject::New(const uint8_t *data, size_t size)
{
	return NewCustomSizeObject<BytesObject>(sizeof (Data) + size, size, data);
}

void BytesObject::Destroy(unsigned int address, Data *data) throw ()
{
	DestroyExtendedData(address, data);
}

size_t BytesObject::size() const
{
	return extension_size<uint8_t>();
}

const uint8_t *BytesObject::c_data() const
{
	return extension_data<Data, uint8_t>();
}

void BytesObjectTypeInit(const TypeObject &type, const char *name)
{
	ExtendedObjectTypeInit(type, name);
}

} // namespace
