/*
 * Copyright (c) 2011  Timo Savola
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 */

#ifndef CONCRETE_OBJECTS_OBJECT_PARTIAL_HPP
#define CONCRETE_OBJECTS_OBJECT_PARTIAL_HPP

#include <concrete/pointer.hpp>

namespace concrete {

{{{
	objects_by_name = {}

	class Object:

		def __init__(self, name, parent_name=None, has_type=True, has_data=True):
			self.name = name
			self.parent_name = parent_name
			self.has_type = has_type
			self.has_data = has_data

		@property
		def short(self):
			if self.name == "Object":
				return "object"
			else:
				return self.name.replace("Object", "").lower()

		@property
		def parent(self):
			return self.parent_name and objects_by_name[self.parent_name]

		@property
		def children(self):
			return [o for o in GetObjects() if o.parent == self]

	@producer
	def RegisterObject(name, parent_name=None, **kwargs):
		global objects_by_name
		objects_by_name[name] = o = Object(name, parent_name, **kwargs)
		return o

	@producer
	def DeclareObject(name, parent_name="Object", **kwargs):
		o = RegisterObject(name, parent_name, **kwargs)

		echo("  CONCRETE_POINTER_DECL_COMMON({o.name}, {o.parent_name})")

		if o.has_data:
			echo("  CONCRETE_POINTER_DECL_DATA({o.name})")

		echo("  friend class concrete::Object;")
		echo("public:")

		if o.has_type:
			echo("  static concrete::TypeObject Type();")

	@consumer
	def ImplementObject(name, type_method=True, data_method=True):
		o = objects_by_name[name]

		if o.has_data and data_method:
			echo("CONCRETE_POINTER_IMPL_DATA({o.name})")

		if o.has_type and type_method:
			echo("concrete::TypeObject {o.name}::Type()")
			echo("{{")
			echo("  return concrete::Context::Active().data()->{o.short}_type;")
			echo("}}")

	@consumer
	def GetObject(name):
		return objects_by_name[name]

	@consumer
	def GetObjects():
		return objects_by_name.values()
}}}

class NoneObject;
class StringObject;
class TypeObject;
struct PortableObjectProtocol;

class Object: public Pointer {
	{{{ RegisterObject("Object") }}}

	friend class NoneObject;
	friend class Pointer;
	friend class TypeObject;

public:
	struct RawAccess;

	static TypeObject Type();
	static Object New();

	Object() throw ();
	Object(const Object &other) throw ();
	~Object() throw ();

	void operator=(const Object &other) throw ();

	operator bool() const throw ();
	bool operator!() const throw () { return !operator bool(); }

	template <typename ObjectType> bool check() const;
	template <typename ObjectType> ObjectType require() const;

	TypeObject type() const;
	const PortableObjectProtocol *protocol() const;

	StringObject repr() const;
	StringObject str() const;

protected:
	struct Data;

	template <typename ObjectType, typename... Args>
	static ObjectType NewObject(Args... args);

	template <typename ObjectType, typename... Args>
	static ObjectType NewCustomSizeObject(size_t size, Args... args);

	explicit Object(unsigned int address) throw ();

private:
	static Data *NonthrowingData(const Pointer &object) throw ();

	static const Pointer &Referenced(const Pointer &object) throw ();

	static void Destroy(unsigned int address, Data *data) throw ();

	struct NoRefInit {};
	Object(const Pointer &pointer, NoRefInit) throw (): Pointer(pointer) {}

	void ref() const throw ();
	void unref() const throw ();

	Data *data() const;
	Data *nonthrowing_data() const throw ();
};

} // namespace

#endif
