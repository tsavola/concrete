/*
 * Copyright (c) 2011, 2012  Timo Savola
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 */

#ifndef CONCRETE_OBJECTS_OBJECT_PARTIAL_HPP
#define CONCRETE_OBJECTS_OBJECT_PARTIAL_HPP

#include <concrete/pointer.hpp>

namespace concrete {

class NoneObject;
class StringObject;
class TypeObject;
struct PortableObjectProtocol;

class Object: public Pointer {
	{{{ RegisterObject("Object") }}}

	friend class NoneObject;
	friend class Pointer;
	friend class TypeObject;

public:
	struct RawAccess;

	/**
	 * @return a reference to the TypeObject instance representing Object
	 */
	static TypeObject Type();

	/**
	 * Create an Object instance.
	 * @return a reference
	 */
	static Object New();

	/**
	 * Generic NoneObject reference.
	 */
	Object() throw ();

	/**
	 * Another reference.
	 */
	Object(const Object &other) throw ();

	/**
	 * Drop the reference.  The object is deleted if this was the last
	 * reference.
	 */
	~Object() throw ();

	/**
	 * Replace the reference.
	 */
	void operator=(const Object &other) throw ();

	/**
	 * @return true if this is not a NoneObject reference
	 */
	operator bool() const throw ();

	/**
	 * @return true if this is a NoneObject reference
	 */
	bool operator!() const throw () { return !operator bool(); }

	/**
	 * @return true if this is a reference to an ObjectType instance or a
	 *         derivative
	 */
	template <typename ObjectType> bool check() const;

	/**
	 * Get a new typed reference.
	 * @throw TypeError if this is not a reference to an ObjectType
	 *                  instance or a derivative
	 */
	template <typename ObjectType> ObjectType require() const;

	/**
	 * @return a reference to the TypeObject instance representing the
	 *         subtype
	 */
	TypeObject type() const;

	/**
	 * Direct access to built-in method vector.
	 * @return borrowed short-term reference
	 */
	const PortableObjectProtocol *protocol() const;

	/**
	 * Invoke the built-in repr method of the subtype.
	 */
	StringObject repr() const;

	/**
	 * Invoke the built-in str method of the subtype.
	 */
	StringObject str() const;

	/**
	 * Visit all object references referenced by this object.
	 */
	template <typename Visitor> void visit(Visitor &v) const;

protected:
	struct Data;

	/**
	 * Create an ObjectType instance.
	 * @return a reference
	 * @throw AllocationError
	 * @throw ...
	 */
	template <typename ObjectType, typename... Args> static ObjectType NewObject(Args... args);

	/**
	 * Create an ObjectType instance.
	 * @param size of the memory allocation for extended data types
	 *             (including the Data struct size)
	 * @return a reference
	 * @throw AllocationError
	 * @throw ...
	 */
	template <typename ObjectType, typename... Args> static ObjectType NewCustomSizeObject(size_t size, Args... args);

	/**
	 * Reference to the Object at an explicit arena offset.
	 */
	explicit Object(unsigned int address) throw ();

private:
	static Data *NonthrowingData(unsigned int address) throw ();

	static const Pointer &Referenced(const Pointer &object) throw ();

	static void DestroyAny(unsigned int address, Data *data) throw ();
	static void Destroy(unsigned int address, Data *data) throw ();

	struct NoRefInit {};
	Object(const Pointer &pointer, NoRefInit) throw (): Pointer(pointer) {}

	void ref() const throw ();
	void unref() const throw ();

	Data *data() const;
	Data *nonthrowing_data() const throw ();
};

} // namespace

#endif
