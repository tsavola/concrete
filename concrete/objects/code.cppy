/*
 * Copyright (c) 2011  Timo Savola
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 */

#include "concrete/objects/code-data.hpp"

#include <cstdint>

#include <concrete/context-data.hpp>
#include <concrete/exception.hpp>
#include <concrete/objects/bytes.hpp>
#include <concrete/objects/code.hpp>
#include <concrete/objects/long.hpp>
#include <concrete/objects/string.hpp>
#include <concrete/objects/tuple.hpp>
#include <concrete/objects/type.hpp>
#include <concrete/util/noncopyable.hpp>
#include <concrete/util/packed.hpp>

namespace concrete {

// TODO: merge Loader, CodeLoader and CodeLoaderState

template <typename State>
class Loader: Noncopyable {
public:
	Loader(State &state) throw ():
		m_state(state)
	{
	}

	bool empty() const
	{
		return m_state.position() >= m_state.size();
	}

	template <typename T>
	T load()
	{
		return PortByteorder(*load_raw<T>(1));
	}

	const char *load_chars(size_t count)
	{
		return load_raw<char>(count);
	}

	template <typename T>
	const T *load_raw(size_t count)
	{
		auto pos = m_state.position();

		if (pos + sizeof (T) * count > m_state.size())
			throw RuntimeError("Loader ran out of data");

		auto data = m_state.data() + pos;
		m_state.advance(sizeof (T) * count);

		return reinterpret_cast<const T *> (data);
	}

private:
	State &m_state;
};

class CodeLoaderState: Noncopyable {
public:
	CodeLoaderState(const uint8_t *data, size_t size):
		m_data(data), m_size(size), m_position(0)
	{
	}

	const uint8_t *data() const
	{
		return m_data;
	}

	size_t size() const
	{
		return m_size;
	}

	size_t position() const
	{
		return m_position;
	}

	void advance(size_t offset)
	{
		m_position += offset;
	}

private:
	const uint8_t *const m_data;
	const size_t m_size;
	size_t m_position;
};

class CodeLoader: Loader<CodeLoaderState> {
public:
	explicit CodeLoader(CodeLoaderState &state):
		Loader<CodeLoaderState>(state)
	{
	}

	template <typename T>
	T load_next()
	{
		return load_next().require<T>();
	}

	Object load_next()
	{
		Object object;

		auto type = load<char>();

		switch (type) {
		case 'N': break;
		case 'i': object = load_int(); break;
		case 'g': object = load_binary_float(); break;
		case 's': object = load_string(); break;
		case '(': object = load_tuple(); break;
		case 'c': object = load_code(); break;
		case 'u': object = load_unicode(); break;
		default: throw CodeException(StringObject::New(&type, 1));
		}

		return object;
	}

private:
	LongObject load_int()
	{
		return LongObject::New(load<int32_t>());
	}

	FloatObject load_binary_float()
	{
		return FloatObject::FromRaw(*load_raw<uint64_t>(1));
	}

	BytesObject load_string()
	{
		auto length = load<uint32_t>();
		return BytesObject::New(load_raw<uint8_t>(length), length);
	}

	StringObject load_unicode()
	{
		auto size = load<uint32_t>();
		return StringObject::New(load_chars(size), size);
	}

	TupleObject load_tuple()
	{
		auto length = load<uint32_t>();
		auto tuple = TupleObject::NewWithSize(length);

		for (unsigned int i = 0; i < length; i++)
			tuple.init_item(i, load_next());

		return tuple;
	}

	CodeObject load_code()
	{
		/* argcount = */ load<uint32_t>();
		/* kwonlyargcount = */ load<uint32_t>();
		/* nlocals = */ load<uint32_t>();
		auto stacksize = load<uint32_t>();
		/* flags = */ load<uint32_t>();
		auto code = load_next<BytesObject>();
		auto consts = load_next<TupleObject>();
		auto names = load_next<TupleObject>();
		auto varnames = load_next<TupleObject>();
		/* freevars = */ load_next();
		/* cellvars = */ load_next();
		/* filename = */ load_next();
		/* name = */ load_next();
		/* firstlineno = */ load<uint32_t>();
		/* lnotab = */ load_next();

		return CodeObject::New(stacksize, code, consts, names, varnames);
	}
};

{{{ ImplementObject("CodeObject") }}}

CodeObject::Data::Data(const TypeObject &type,
                             unsigned int stacksize,
                             const BytesObject &bytecode,
                             const TupleObject &consts,
                             const TupleObject &names,
                             const TupleObject &varnames):
	Object::Data(type),
	stacksize(stacksize),
	bytecode(bytecode),
	consts(consts),
	names(names),
	varnames(varnames)
{
}

CodeObject CodeObject::New(unsigned int stacksize,
                           const BytesObject &bytecode,
                           const TupleObject &consts,
                           const TupleObject &names,
                           const TupleObject &varnames)
{
	return NewObject<CodeObject>(stacksize, bytecode, consts, names, varnames);
}

CodeObject CodeObject::Load(const void *void_data, size_t size)
{
	auto byte_data = reinterpret_cast<const uint8_t *> (void_data);

	CodeLoaderState state(byte_data, size);
	CodeLoader loader(state);

	return loader.load_next<CodeObject>();
}

unsigned int CodeObject::stacksize() const
{
	return data()->stacksize;
}

BytesObject CodeObject::bytecode() const
{
	return data()->bytecode;
}

TupleObject CodeObject::consts() const
{
	return data()->consts;
}

TupleObject CodeObject::names() const
{
	return data()->names;
}

TupleObject CodeObject::varnames() const
{
	return data()->varnames;
}

void CodeObjectTypeInit(const TypeObject &type, const char *name)
{
	ObjectTypeInit(type, name);
}

} // namespace
