/*
 * Copyright (c) 2012  Timo Savola
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 */

#ifndef CONCRETE_OBJECTS_EXTENDED_HPP
#define CONCRETE_OBJECTS_EXTENDED_HPP

#include <cstddef>

#include <concrete/objects/object-partial.hpp>

namespace concrete {

class ExtendedObject: public Object {
	{{{ DeclareObject("ExtendedObject", has_type=False) }}}

protected:
	template <typename DataType>
	static void DestroyExtendedData(unsigned int address, DataType *data) throw ()
	{
		Object::DestroyExtendedData(address, data, ExtensionSize(data));
	}

	template <typename ExtensionType>
	size_t extension_size() const
	{
		return ExtensionSize(data()) / sizeof (ExtensionType);
	}

	template <typename DataType, typename ExtensionType>
	ExtensionType *extension_data() const
	{
		return extended_data_cast<DataType>()->extension_data<DataType, ExtensionType>();
	}

	template <typename DataType>
	DataType *extended_data_cast() const
	{
		auto data = data_cast<DataType>();
		extend_data_access<DataType>(ExtensionSize(data));
		return data;
	}

private:
	static size_t ExtensionSize(const Data *data) throw ();
};

void ExtendedObjectTypeInit(const TypeObject &type, const char *name);

} // namespace

#endif
