/*
 * Copyright (c) 2011, 2012  Timo Savola
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 */

#ifndef CONCRETE_OBJECTS_DICT_DATA_HPP
#define CONCRETE_OBJECTS_DICT_DATA_HPP

#include "dict.hpp"

#include <concrete/objects/object-data.hpp>
#include <concrete/util/noncopyable.hpp>
#include <concrete/util/packed.hpp>

namespace concrete {

struct DictObject::Data: Object::Data {
	struct Item: Noncopyable {
		Item(const Object &key, const Object &value);

		Portable<Object> key;
		Portable<Object> value;
	} CONCRETE_PACKED;

	explicit Data(const TypeObject &type);
	~Data() throw ();

	template <typename Visitor> void visit(Visitor &v) const;

	const Item *items() const throw ();
	Item *items() throw ();
	unsigned int capacity() const throw ();
	unsigned int find_item(const Object &key) const;

	Portable<uint32_t> size;
} CONCRETE_PACKED;

template <typename Visitor>
void DictObject::Data::visit(Visitor &v) const
{
	Object::Data::visit(v);

	auto s = *size;

	for (uint32_t i = 0; i < s; i++) {
		auto &item = items()[i];

		v(item.key);
		v(item.value);
	}
}

} // namespace

#endif
